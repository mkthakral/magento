<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magento.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magento.com for more information.
 *
 * @category    Mage
 * @package     Mage_Customer
 * @copyright  Copyright (c) 2006-2014 X.commerce, Inc. (http://www.magento.com)
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */

/**
 * Customer account controller
 *
 * @category   Mage
 * @package    Mage_Customer
 * @author      Magento Core Team <core@magentocommerce.com>
 */

 require_once("Mage/Customer/controllers/AccountController.php");
 class  Mate_Customer_AccountController extends Mage_Customer_AccountController 

{
    /**
     * Default customer account page
     */
    public function indexAction()
    {
        $this->loadLayout();
        $this->_initLayoutMessages('customer/session');
        $this->_initLayoutMessages('catalog/session');

        $this->getLayout()->getBlock('content')->append(
            $this->getLayout()->createBlock('customer/account_dashboard')
        );
        $this->getLayout()->getBlock('head')->setTitle($this->__('My Account'));
        $this->renderLayout();
    }	

    public function membershipAction()
    {
        $this->loadLayout();
        $this->_initLayoutMessages('customer/session');
        $this->_initLayoutMessages('catalog/session');
        $this->renderLayout();
		if($this->getRequest()->isPost())
		{
			$cartHelper = Mage::helper('checkout/cart');
			$items = $cartHelper->getCart()->getItems();        
			foreach ($items as $item) 
			{
			   $itemId = $item->getItemId();
			   $cartHelper->getCart()->removeItem($itemId)->save();
			}
			$productId = $this->getRequest()->getParam("subtype");
			$cart = Mage::getModel('checkout/cart');
			$cart->init();
			$productCollection = Mage::getModel('catalog/product')->load($productId);
			$cart->addProduct($productCollection,array( 'product_id' => $productId, 'qty' => 1,'form_key' => Mage::getSingleton('core/session')->getFormKey()));
			$cart->save();
			//$this->_redirect("checkout/onepage/");
			$this->_redirectReferer();
		}
    }

    /**
     * Change customer password action
     */
    public function editPostAction()
    {
        if (!$this->_validateFormKey()) {
            return $this->_redirect('*/*/edit');
        }

        if ($this->getRequest()->isPost()) {
            /** @var $customer Mage_Customer_Model_Customer */
            $customer = $this->_getSession()->getCustomer();
            $customer->setOldEmail($customer->getEmail());
            /** @var $customerForm Mage_Customer_Model_Form */
            $customerForm = $this->_getModel('customer/form');
            $customerForm->setFormCode('customer_account_edit')
                ->setEntity($customer);

            $customerData = $customerForm->extractData($this->getRequest());

            $errors = array();
            $customerErrors = $customerForm->validateData($customerData);
            if ($customerErrors !== true) {
                $errors = array_merge($customerErrors, $errors);
            } else {
                $customerForm->compactData($customerData);
                $errors = array();

                // If email change was requested then set flag
                $isChangeEmail = ($customer->getOldEmail() != $customer->getEmail()) ? true : false;
                $customer->setIsChangeEmail($isChangeEmail);

                // If password change was requested then add it to common validation scheme
                $customer->setIsChangePassword($this->getRequest()->getParam('change_password'));

                if ($customer->getIsChangePassword()) {
					if (!$customer->validatePassword($this->getRequest()->getPost('current_password'))) {
						$errors[] = $this->__('Invalid current password');
					}					
                    $newPass    = $this->getRequest()->getPost('password');
                    $confPass   = $this->getRequest()->getPost('confirmation');

                    if (strlen($newPass)) {
                        /**
                         * Set entered password and its confirmation - they
                         * will be validated later to match each other and be of right length
                         */
                        $customer->setPassword($newPass);
                        $customer->setPasswordConfirmation($confPass);
                    } else {
                        $errors[] = $this->__('New password field cannot be empty.');
                    }
                }

                // Validate account and compose list of errors if any
                $customerErrors = $customer->validate();
                if (is_array($customerErrors)) {
                    $errors = array_merge($errors, $customerErrors);
                }
            }

            if (!empty($errors)) {
                $this->_getSession()->setCustomerFormData($this->getRequest()->getPost());
                foreach ($errors as $message) {
                    $this->_getSession()->addError($message);
                }
                $this->_redirect('*/*/edit');
                return $this;
            }

            try {
                $customer->cleanPasswordsValidationData();

                // Reset all password reset tokens if all data was sufficient and correct on email change
                if ($customer->getIsChangeEmail()) {
                    $customer->setRpToken(null);
                    $customer->setRpTokenCreatedAt(null);
                }
				
				if($customer->getData('approval') == 65){
					$customer->setData('approval',64);
				}
				if($customer->getData('email_for_approval')== 66){
					
					$customer->setData('email_for_approval',67);
					$templateId = 2;
					$emailTemplate = Mage::getModel('core/email_template')->load($templateId);
					$mail = Mage::getModel('core/email');
					$mail->setToName('Folyoz');
					$mail->setFromName('Folyoz');
					$email = Mage::getStoreConfig('trans_email/ident_general/email');
					$email_template_variables = array(
						'name' => $customer->getName(),
					);
					$mailSubject = 'Admin : Request To Approve My Account';
					$from_email = "dibyendukanrar2010@gmail.com";
					$processedTemplate = $emailTemplate->getProcessedTemplate($email_template_variables);

					$mail = Mage::getModel('core/email');
					$mail->setToName('azco');
					$mail->setTemplateParam($email_template_variables);
					$mail->setToEmail($email);
					$mail->setBody($processedTemplate);
					$mail->setSubject($mailSubject);
					$mail->setFromEmail($from_email);
					$mail->setType('Html');

					try {
						$mail->send();
					} catch (Exception $ex) {}

				}
                $customer->save();
                $this->_getSession()->setCustomer($customer)
                    ->addSuccess($this->__('The account information has been saved.'));

                if ($customer->getIsChangeEmail() || $customer->getIsChangePassword()) {
                    $customer->sendChangedPasswordOrEmail();
                }

                $this->_redirect('customer/account');
                return;
            } catch (Mage_Core_Exception $e) {
                $this->_getSession()->setCustomerFormData($this->getRequest()->getPost())
                    ->addError($e->getMessage());
            } catch (Exception $e) {
                $this->_getSession()->setCustomerFormData($this->getRequest()->getPost())
                    ->addException($e, $this->__('Cannot save the customer.'));
            }
        }

        $this->_redirect('*/*/edit');
    }
	
    public function helpwikiAction()
    {
        $this->loadLayout();
        $this->_initLayoutMessages('customer/session');
        $this->_initLayoutMessages('catalog/session');
        $this->renderLayout();
    }	

    public function submitportfolioAction()
    {
        $this->loadLayout();
        $this->_initLayoutMessages('customer/session');
        $this->_initLayoutMessages('catalog/session');
        $this->renderLayout();
    }		
    
	public function sendPortfolioToDirectorAction()
    {

		if($_REQUEST['submit']){
			$userid = $_REQUEST['id'];
			$loinuserid = $loginuser = Mage::getSingleton('customer/session')->getCustomer()->getId();
			$match_value = $this->getRequest()->getParam('match_value');
			$resource = Mage::getSingleton('core/resource');
			$writeAdapter = $resource->getConnection('core_write');
			$query = "INSERT INTO `submitted_portfolio` (`id`, `submitted_user_id`,`user_id`, `status`, `match_value`, `created`, `updated`) VALUES (NULL, $loinuserid, $userid, 'unviewed', '$match_value', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)";
			$writeAdapter->query($query);						
		}
		$this->_getSession()->addSuccess($this->__('Portfolio submitted.'));
		$this->_redirectReferer();
		
    }
	
// ajax action	
    public function ajaxDirectorDetailsAction()
    {
		$id = $this->getRequest()->getParam('id');
		$customer = Mage::getModel('customer/customer')->load($id);
		$loginuser = Mage::getSingleton('customer/session')->getCustomer();
		$loginuserid = $loginuser->getId();
				
		if($customer)
		{
			$resource = Mage::getSingleton('core/resource');
			$readAdapter= $resource->getConnection('core_read');	
			$query = "SELECT * FROM `user_subscription` WHERE user_id = $loginuserid order by id DESC";
			$result = $readAdapter->fetchAll($query);
	
			$disabled = "" ;
			if($loginuser->getData('approval') != 63 or count($result) == 0){ 
				$disabled = "disabled" ;
			}
			$readAdapter= $resource->getConnection('core_read');
			$query = "SELECT * FROM `submitted_portfolio` WHERE `submitted_user_id` = $loginuserid and `user_id` = $id";
			$result = $readAdapter->fetchAll($query);
			if(count($result) == 0){
				$form = '
					<form action="'.Mage::getBaseUrl().'customer/account/sendPortfolioToDirector/" method="post">
						<input type="hidden" name="id" value="'.$id.'">
						<input type="submit" name="submit" value="Submit Portfolio"'.$disabled.'>
					</form>';
			}else{
				$form = "<div class='port-submitted'>Portfolio Submited</div>"; 
			}
			$worktypei = $worktypep = "";
			$options = Mage::getResourceSingleton('customer/customer')->getAttribute('work_type_use_for_photography')->getSource()->getAllOptions();
			foreach ($options as $option):
				if($option["value"] != "") {
					if (in_array($option['value'], explode(',', $customer->getData('work_type_use_for_photography')))){
						$worktypep .= $option['label'].",";
					}
				} 
			endforeach;
			$options = Mage::getResourceSingleton('customer/customer')->getAttribute('work_type_use_for_illustration')->getSource()->getAllOptions();
			foreach ($options as $option):
				if($option["value"] != "") {
					if (in_array($option['value'], explode(',', $customer->getData('work_type_use_for_illustration')))){
						$worktypei.= $option['label'].",";
					}
				} 
			endforeach;			
			if($customer->getAvatar()==""){
			$img = '<span class="customer-img"><img id="preview" src="'. Mage::getBaseUrl(Mage_Core_Model_Store::URL_TYPE_MEDIA) .'customer/nopropimg.png" height="125px"; width="125px"/></span>';
			} else {
			$img =	'<span class="customer-img"><img id="preview" src="'. Mage::getBaseUrl(Mage_Core_Model_Store::URL_TYPE_MEDIA).'customer'. $customer->getAvatar().'" height="125px"; width="125px" /></span>';
			}
			$data = '
			<div class="details-body">
				<div class="row">
					<div class="direcor-pic">'.
						$img
					.'</div>
					<div class="direcor-personal">
						<strong>'.$customer->getName().'</strong>
						<div>
							<span class="details-heading">Position:</span>
							<span>'.$customer->getData('position').'</span>
						</div>
						<div>
							<span class="details-heading">Publication:</span>
							<span>'.$customer->getData('company_name').'</span>
						</div>
						<div>
							<span class="details-heading">Uses Illustration:</span>
							<span>'.$customer->getData('hire_illustrators').'</span>
						</div>
						<div>
							<span class="details-heading">Uses Photography:</span>
							<span>'.$customer->getData('hire_photographers').'</span>
						</div>
					</div>'.$form.'
				</div>
				<div class="row">
					<div class="details-heading">Type of Illustration they use:</div>
					<div>'.$worktypei.'</div>
				</div>
				<div class="row">
					<div class="details-heading">Type of Photography they use:</div>
					<div>'.$worktypep.'</div>
				</div>
				<div class="row">
					<div class="details-heading">Other:</div>
					<div>'.$customer->getData('looking_for_information').'</div>
				</div>
				<div class="row">
					<div class="details-heading">Comments:</div>
					<div>'.$customer->getData('not_want_to_see_information').'</div>
				</div>
			</div>';
			echo $data;
		}
    }		
}
